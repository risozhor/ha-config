substitutions:
  name: voice_assistant
  friendly_name: voice_assistant
esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  name_add_mac_suffix: false
  min_version: 2023.10.1
  on_boot:
    then:
      - sensor.rotary_encoder.set_value:
          id: rotary_dial
          value: 0
      - light.turn_on:
          id: top_led
          effect: slow_pulse
          red: 100%
          green: 60%
          blue: 0%
      - wait_until:
          condition:
            wifi.connected:
      - light.turn_on:
          id: top_led
          effect: pulse
          red: 0%
          green: 100%
          blue: 0%
      - sensor.rotary_encoder.set_value:
          id: rotary_dial
          value: 0
      - wait_until:
          condition:
            api.connected:
      - light.turn_on:
          id: top_led
          effect: none
          red: 0%
          green: 100%
          blue: 0%
      - sensor.rotary_encoder.set_value:
          id: rotary_dial
          value: 0
      - delay: 1s
      - script.execute: reset_led

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino
logger:
  level: DEBUG 
  # level: NONE
api:
  services:
    - service: start_va
      then:
        - voice_assistant.start:
            silence_detection: false
    - service: stop_va
      then:
        - voice_assistant.stop
ota:
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: 192.168.10.107
    gateway: 192.168.10.1
    subnet: 255.255.255.0
button:
  - platform: factory_reset
    id: factory_reset_btn
    name: Factory reset
i2s_audio:
  # - id: i2s_out
    i2s_lrclk_pin: GPIO13
    i2s_bclk_pin: GPIO18
  # - id: i2s_in
  #   i2s_lrclk_pin: GPIO37
  #   i2s_bclk_pin: GPIO45
speaker:
  - platform: i2s_audio
    # i2s_audio_id: i2s_out
    id: va_speaker
    i2s_dout_pin: GPIO12
    dac_type: external
    mode: mono
media_player:
  - platform: i2s_audio
    # i2s_audio_id: i2s_out
    name: va media player
    id: va_out
    dac_type: external
    i2s_dout_pin: GPIO12
    mode: mono
    mute_pin:
      number: GPIO21
      inverted: True
    on_state:
      - logger.log:
          format: "va state %.1f"
          args: [ 'id(va_out).volume']
microphone:
  - platform: i2s_audio
    # i2s_audio_id: i2s_in
    id: va_microphone
    i2s_din_pin: GPIO20
    adc_type: external
    pdm: false
voice_assistant:
  id: va
  microphone: va_microphone
  media_player: va_out
  # speaker: va_speaker
  use_wake_word: true
  on_start:
    - light.turn_on:
        id: top_led
        blue: 100%
        red: 0%
        green: 0%
        effect: none
  on_listening:
    - light.turn_on:
        id: top_led
        blue: 100%
        red: 0%
        green: 0%
        brightness: 100%
        effect: pulse
  on_tts_end:
    - media_player.play_media: !lambda return x;
    - light.turn_on:
        id: top_led
        blue: 0%
        red: 20%
        green: 100%
        effect: pulse
  on_end:
    - delay: 100ms
    - wait_until:
        not:
          media_player.is_playing: va_out
    - script.execute: reset_led
  on_client_connected:
    - if:
        condition:
          and:
            - switch.is_on: use_wake_word
            - binary_sensor.is_off: mute_switch
        then:
          - voice_assistant.start_continuous:
  on_client_disconnected:
    - if:
        condition:
          and:
            - switch.is_on: use_wake_word
            - binary_sensor.is_off: mute_switch
        then:
          - voice_assistant.stop:
  on_error:
    - light.turn_on:
        id: top_led
        blue: 0%
        red: 100%
        green: 0%
    - delay: 1s
    - script.execute: reset_led
sensor:
  - platform: rotary_encoder
    name: "Rotary Encoder"
    id: rotary_dial
    pin_a:
      number: GPIO41
      inverted: true
    pin_b:
      number: GPIO40
      inverted: true
    on_clockwise:
      - logger.log: "Turned Clockwise"
      - script.execute:
          id: set_volume
          volume: 0.05
      # - delay: 1s
    on_anticlockwise:
      - logger.log: "Turned Anticlockwise"
      - script.execute:
          id: set_volume
          volume: -0.05
      # - delay: 1s
binary_sensor: 
  - platform: gpio
    id: action
    name: action
    pin:
      number: GPIO42
      inverted: true
    on_click:
      - if:
          condition:
            or:
              - switch.is_off: use_wake_word
              - binary_sensor.is_on: mute_switch
          then:
            - if:
                condition: voice_assistant.is_running
                then:
                  - voice_assistant.stop:
                  - script.execute: reset_led
                else:
                  - voice_assistant.start:
          else:
            - voice_assistant.stop
            - delay: 1s
            - script.execute: reset_led
            - script.wait: reset_led
            - voice_assistant.start_continuous: 
  - platform: gpio
    id: mute_switch
    pin:
      number: GPIO10
      mode: INPUT_PULLUP
    name: Disable wake word
    on_press:
      - script.execute: turn_on_wake_word
    on_release:
      - script.execute: turn_off_wake_word
  - platform: status
    id: api_connection
    filters:
      - delayed_on: 1s
    on_press:
      - if:
          condition:
            and:
              - switch.is_on: use_wake_word
              - binary_sensor.is_off: mute_switch
          then:
            - voice_assistant.start_continuous:
    on_release:
      - if:
          condition:
            and:
              - switch.is_on: use_wake_word
              - binary_sensor.is_off: mute_switch
          then:
            - voice_assistant.stop:
# text_sensor:
#   - platform: template
#     name: "Media URL"
#     id: template_text
light:
  - platform: esp32_rmt_led_strip
    id: leds
    name: voice_led
    pin: GPIO35
    # pin: GPIO48
    chipset: SK6812
    num_leds: 6
    rgb_order: grb
    rmt_channel: 0
    default_transition_length: 0s
    gamma_correct: 2.8
  - platform: partition
    id: top_led
    segments:
      - id: leds
        from: 0
        to: 5
    effects:
      - pulse:
          name: pulse
          transition_length: 250ms
          update_interval: 250ms
      - pulse:
          name: slow_pulse
          transition_length: 1s
          update_interval: 2s
      - addressable_lambda: 
          name: show_volume
          update_interval: 50ms
          lambda: |-
            int int_volume = int(id(va_out).volume * 100.0f * it.size());
            int full_leds = int_volume / 100;
            int last_brightness = int_volume % 100;
            int i = 0;
            for(; i < full_leds; i++) {
              it[i] = Color::WHITE;
            }
            if(i < 4) {
              it[i++] = Color(0,0,0).fade_to_white(last_brightness*256/100);
            }
            for(; i < it.size(); i++) {
              it[i] = Color::BLACK;
            }
script:
  - id: reset_led
    then:
      - if:
          condition:
            and:
              - switch.is_on: use_wake_word
              - binary_sensor.is_off: mute_switch
          then:
            - light.turn_on:
                id: top_led
                blue: 100%
                red: 100%
                green: 0%
                brightness: 100%
                effect: none
          else:
            - light.turn_off: top_led

  - id: set_volume
    mode: restart
    parameters:
      volume: float
    then:
      - media_player.volume_set:
          id: va_out
          volume: !lambda return clamp(id(va_out).volume+volume, 0.0f, 1.0f);
      - light.turn_on:
          id: top_led
          effect: show_volume
      - delay: 1s
      - script.execute: reset_led

  - id: turn_on_wake_word
    then:
      - if:
          condition:
            and:
              - binary_sensor.is_off: mute_switch
              - switch.is_on: use_wake_word
          then:
            - lambda: id(va).set_use_wake_word(true);
            - if:
                condition:
                  not:
                    - voice_assistant.is_running
                then:
                  - voice_assistant.start_continuous
            - script.execute: reset_led

  - id: turn_off_wake_word
    then:
      - voice_assistant.stop
      - lambda: id(va).set_use_wake_word(false);
      - script.execute: reset_led
switch:
  - platform: template
    name: Use Wake Word
    id: use_wake_word
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    on_turn_on:
      - script.execute: turn_on_wake_word
    on_turn_off:
      - script.execute: turn_off_wake_word