esphome:
  name: esp-nsp01
  comment: Sonoff NSPanel
esp32:
  board: esp32dev
wifi:
  networks:
  - ssid: !secret ssid
    password: !secret password
    manual_ip:
      static_ip: 192.168.10.200
      gateway: 192.168.10.1
      subnet: 255.255.255.0
  ap:
    ssid: "Fallback Hotspot"
    password: !secret ap_password
time:
  - platform: homeassistant
    id: homeassistant_time
logger:
  on_message:
    level: DEBUG
    then:
ota:
web_server:

http_request:
  # useragent: esphome/device
  useragent: esphome/esp32dev
  timeout: 5s

substitutions:
  switch_id: "nsp01"
  friendly_name: "NSPanel"
uart:
  tx_pin: 16
  rx_pin: 17
  baud_rate: 115200
external_components:
  - source: github://pr#2702
    components: ["nspanel"]
    refresh: 0s


interval:
  - interval: 1min
    then:
       - script.execute: nspanel_weather
nspanel:
  id: nspanel1
  time_id: homeassistant_time
  temperature: ${switch_id}_temperature
  eco_mode_switch: ${switch_id}_eco_mode
  screen_power_switch: ${switch_id}_screen_power
  relays:
    - ${switch_id}_relay_1
    - ${switch_id}_relay_2
  widgets:
    - type: scene
      name: Mario
      on_click:
        - logger.log: Mario Scene tapped
        - rtttl.play: "Super Mario:d=4,o=5,b=100:16e6,16e6,32p,8e6,16c6,8e6,8g6,8p,8g,8p,8c6,16p,8g,16p,8e,16p,8a,8b,16a#,8a,16g.,16e6,16g6,8a6,16f6,8g6,8e6,16c6,16d6,8b,16p,8c6,16p,8g,16p,8e,16p,8a,8b,16a#,8a,16g.,16e6,16g6,8a6,16f6,8g6,8e6,16c6,16d6,8b,8p,16g6,16f#6,16f6,16d#6,16p,16e6,16p,16g#,16a,16c6,16p,16a,16c6,16d6,8p,16g6,16f#6,16f6,16d#6,16p,16e6,16p,16c7,16p,16c7,16c7,p,16g6,16f#6,16f6,16d#6,16p,16e6,16p,16g#,16a,16c6,16p,16a,16c6,16d6,8p,16d#6,8p,16d6,8p,16c6"

    - type: scene
      name: Friends
      on_click:
        - logger.log: Friends Scene tapped
        - rtttl.play: "Friends:d=8,o=5,b=100:16d,g,a,c6,b,a,g.,16g,d,g,a,2a,p,16p,16d,g,a,c.6,16b,16a,g.,16c6,b,a,g,2d6,p,16p,16c6,c6,c6,c6,c6,c6,c.6,16c6,b,2b,p,16a,16a,16b,16c6,c6,c6,c6,c.6,16b,a.,16g,g.,16d,16g,16a,b,4a,4g,p"

    - type: empty
    - type: empty
    - type: empty
    - type: empty
    - type: empty
    - type: empty
output:
  - platform: ledc
    id: ${switch_id}_buzzer_out
    pin:
      number: 21
rtttl:
  id: ${switch_id}_buzzer
  output: ${switch_id}_buzzer_out
api:
  id: api_id
  services:
    - service: send_json
      variables:
        my_type: int
        my_json: string
      then:
        - lambda: 'id(nspanel1).send_json_command(my_type,my_json);'
switch:
# Restart Switch
  # - platform: restart
    # name: "${switch_id} Restart"
  - platform: gpio
# Ліве реле
    name: ${switch_id} Relay 1
    id: ${switch_id}_relay_1
    pin:
      number: 22
  - platform: gpio
# Праве реле
    name: ${switch_id} Relay 2
    id: ${switch_id}_relay_2
    pin:
      number: 19
  - platform: gpio
    id: ${switch_id}_screen_power
    entity_category: config
    pin:
      number: 4
      inverted: true
    restore_mode: ALWAYS_OFF
    on_turn_on:
      then:
        - lambda: |-
            uint8_t rssi = 0;
            rssi = (wifi::global_wifi_component->wifi_rssi() * -1) / 20.0f;
            std::string json_str = json::build_json([rssi](JsonObject root) {
              root["wifiState"] = "connected";
              root["rssiLevel"] = rssi;
            });
            id(nspanel1).send_json_command(0x85, json_str);
        - delay: 6s
        - script.execute: nspanel_init
        - delay: 3s
        - script.execute: nspanel_weather


  - platform: template
# Вимикач затемнення екрану
    id: ${switch_id}_eco_mode
    entity_category: config
    restore_state: true
    optimistic: true
    
binary_sensor:
# Фізичні кнопки NSPanel
  - platform: gpio
    id: ${switch_id}_button_1
    # name: ${switch_id} Left Button
    pin:
      number: 14
      inverted: true
    on_click:
      - switch.toggle: ${switch_id}_relay_1
  - platform: gpio
    id: ${switch_id}_button_2
    # name: ${switch_id} Right Button
    pin:
      number: 27
      inverted: true
    on_click:
      - switch.toggle: ${switch_id}_relay_2
sensor:
# Wifi
  - platform: wifi_signal
    name: "${switch_id} WiFi Signal Sensor"
    update_interval: 60s
# датчик температури nspanel 
  - platform: adc
    id: ${switch_id}_ntc_source
    pin: 38
    update_interval: 10s
    attenuation: 11db
  - platform: resistance
    id: ${switch_id}_resistance_sensor
    sensor: ${switch_id}_ntc_source
    configuration: DOWNSTREAM
    resistor: 11.2kOhm
  - platform: ntc
    id: ${switch_id}_temperature
    sensor: ${switch_id}_resistance_sensor
    calibration:
      b_constant: 3950
      reference_temperature: 25°C
      reference_resistance: 10kOhm
    #name: "${switch_id} Temperature"
  - platform: homeassistant
    id: temperature_sensor
    entity_id: sensor.openweathermap_temperature
    accuracy_decimals: 1
  - platform: homeassistant
    id: wfth
    entity_id: sensor.openweathermap_forecast_temperature
    accuracy_decimals: 1
    internal: true
  - platform: homeassistant
    id: wftl
    name: wftl
    accuracy_decimals: 1
    entity_id: sensor.openweathermap_forecast_temperature_low
    internal: true
  - platform: template
    #name: "icon_code"
    id: icon_code
    lambda: |-
      if (id(wcond).state=="sunny") {return 1;}
      else if (id(wcond).state=="partlycloudy") {return 2;}
      else if (id(wcond).state=="cloudy") {return 7;}
      else if (id(wcond).state=="foggy") {return 11;}
      else if (id(wcond).state=="snowy") {return 20;}
      else if (id(wcond).state=="windy") {return 32;}
      else if (id(wcond).state=="rainy") {return 40;}
      else {return 30;};
      
      
      //Якщо ваш погодний провайдер надає інші значення стану погоди ("sunny", "partlycloudy", "rainy" та інші )
      //підставте їх вище, замінивши або додавши їх відповідні значення, розмір літер має значення
      //нижче можливі варіанти номерів піктограм погоди для дисплея NSPanel
      
      //1 = sunny
      //2 = sun+cloud
      //7 = cloud+blue cloud
      //11 = cloud+fog
      //15 = cloud rain lightning
      //20 = cloud+snowflake
      //22 = cloud + 3 snowflakes
      //22 = cloud + 5 ice crystals
      //22 = cloud + rain + snow
      //30 = red thermostat
      //31 = blue thermostat
      //32 = wind
      //40 = rainy cloud

    update_interval: 60s
    
text_sensor:
  - platform: homeassistant
    id: wcond
    name: wcond
    entity_id: sensor.openweathermap_condition

    
script:
  - id: nspanel_init
    # Script to initialise panel on full power on (or when screen is powered on from ESP)
    then:
      # Setup Widgets - must send all 8
      # Widget 1
      - lambda: |-
          id(nspanel1).send_json_command(0x86,"{\"HMI_resources\":[{\"index\":3,\"ctype\":\"device\",\"id\":\"light7\",\"uiid\":52}]}"); id(nspanel1).send_json_command(0x86,"{\"relation\":[{\"ctype\":\"device\",\"id\":\"light7\",\"name\":\"DIM09\",\"online\":1,\"params\":{\"switch\":\"off\",\"ltype\":\"white\",\"white\":{\"br\":0,\"ct\":0}}]}");
      # Widget 2
      - lambda: |-
          id(nspanel1).send_json_command(0x86,"{\"HMI_resources\":[{\"index\":4,\"ctype\":\"device\",\"id\":\"wled_test\",\"uiid\":33}]}");
          id(nspanel1).send_json_command(0x86,"{\"relation\":[{\"ctype\":\"device\",\"id\":\"wled_test\",\"name\":\"WLED\",\"online\":1,\"params\":{\"switch\":\"on\"}]}");
      # Widget 3
      - lambda: |-
          id(nspanel1).send_json_command(0x86,"{\"HMI_resources\":[{\"index\":5,\"ctype\":\"device\",\"id\":\"plug_09\",\"uiid\":1}]}");
          id(nspanel1).send_json_command(0x86,"{\"relation\":[{\"ctype\":\"device\",\"id\":\"plug_09\",\"name\":\"PLUG09\",\"online\":1,\"params\":{\"switch\":\"on\"}]}");
      # Widget 4
      - lambda: |-
          id(nspanel1).send_json_command(0x86,"{\"HMI_resources\":[{\"index\":6,\"ctype\":\"device\",\"id\":\"group_01\",\"uiid\":2}]}");
          id(nspanel1).send_json_command(0x86,"{\"relation\":[{\"ctype\":\"device\",\"id\":\"group_01\",\"name\":\"Plugs\",\"online\":1,\"params\":{\"switches\":[{\"switch\":\"on\",\"outlet\":0},{\"switch\":\"on\",\"outlet\":1}]}");
      # Widget 5
      - lambda: |-
          id(nspanel1).send_json_command(0x86,"{\"HMI_resources\":[{\"index\":7,\"ctype\":\"device\",\"id\":\"test_curtain\",\"uiid\":11}]}");
          id(nspanel1).send_json_command(0x86,"{\"relation\":[{\"ctype\":\"device\",\"id\":\"test_curtain\",\"name\":\"Cover\",\"online\":1,\"params\":{\"switch\":\"on\"}]}");
      # Widget 6
      - lambda: 'id(nspanel1).send_json_command(0x86,"{\"index\":8,\"type\":\"delete\"}");'
      # Widget 7
      # - lambda: 'id(nspanel1).send_json_command(0x86,"{\"index\":7,\"type\":\"delete\"}");'
      # # Widget 8
      # - lambda: 'id(nspanel1).send_json_command(0x86,"{\"index\":8,\"type\":\"delete\"}");'
      # Setup Thermostat
      - lambda: 'id(nspanel1).send_json_command(0x84,"{\"HMI_ATCDevice\":{\"ctype\":\"device\",\"id\":\"climate\",\"outlet\":0,\"etype\":\"hot\"}}");'
      - lambda: 'id(nspanel1).send_json_command(0x84,"{\"ATCMode\":0}");'
  - id: nspanel_weather
    then:
      - lambda: |-
          int wftl_int=30,wfth_int=0,icon_code_int=0;
          wftl_int = int(id(wftl).state);
          wfth_int = int(id(wfth).state);
          icon_code_int = int(id(icon_code).state);
          id(nspanel1).send_json_command(0x81, "{\"HMI_weather\":" + to_string(icon_code_int) + ",\"HMI_outdoorTemp\":{\"current\":"+ to_string(id(temperature_sensor).state) +",\"range\":\"" + to_string(wftl_int) + "," + to_string(wfth_int) + "\"}}");
          
